// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "LineItem.hxx"

#include "Int48.hxx"

#include "TimeType.hxx"

#include "String256.hxx"

namespace espi
{
  // LineItem
  // 

  const LineItem::amount_type& LineItem::
  amount () const
  {
    return this->amount_.get ();
  }

  LineItem::amount_type& LineItem::
  amount ()
  {
    return this->amount_.get ();
  }

  void LineItem::
  amount (const amount_type& x)
  {
    this->amount_.set (x);
  }

  void LineItem::
  amount (::std::unique_ptr< amount_type > x)
  {
    this->amount_.set (std::move (x));
  }

  const LineItem::rounding_optional& LineItem::
  rounding () const
  {
    return this->rounding_;
  }

  LineItem::rounding_optional& LineItem::
  rounding ()
  {
    return this->rounding_;
  }

  void LineItem::
  rounding (const rounding_type& x)
  {
    this->rounding_.set (x);
  }

  void LineItem::
  rounding (const rounding_optional& x)
  {
    this->rounding_ = x;
  }

  void LineItem::
  rounding (::std::unique_ptr< rounding_type > x)
  {
    this->rounding_.set (std::move (x));
  }

  const LineItem::dateTime_type& LineItem::
  dateTime () const
  {
    return this->dateTime_.get ();
  }

  LineItem::dateTime_type& LineItem::
  dateTime ()
  {
    return this->dateTime_.get ();
  }

  void LineItem::
  dateTime (const dateTime_type& x)
  {
    this->dateTime_.set (x);
  }

  void LineItem::
  dateTime (::std::unique_ptr< dateTime_type > x)
  {
    this->dateTime_.set (std::move (x));
  }

  const LineItem::note_type& LineItem::
  note () const
  {
    return this->note_.get ();
  }

  LineItem::note_type& LineItem::
  note ()
  {
    return this->note_.get ();
  }

  void LineItem::
  note (const note_type& x)
  {
    this->note_.set (x);
  }

  void LineItem::
  note (::std::unique_ptr< note_type > x)
  {
    this->note_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace espi
{
  // LineItem
  //

  LineItem::
  LineItem (const amount_type& amount,
            const dateTime_type& dateTime,
            const note_type& note)
  : ::xml_schema::type (),
    amount_ (amount, this),
    rounding_ (this),
    dateTime_ (dateTime, this),
    note_ (note, this)
  {
  }

  LineItem::
  LineItem (const LineItem& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    amount_ (x.amount_, f, this),
    rounding_ (x.rounding_, f, this),
    dateTime_ (x.dateTime_, f, this),
    note_ (x.note_, f, this)
  {
  }

  LineItem::
  LineItem (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    amount_ (this),
    rounding_ (this),
    dateTime_ (this),
    note_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void LineItem::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // amount
      //
      if (n.name () == "amount" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< amount_type > r (
          amount_traits::create (i, f, this));

        if (!amount_.present ())
        {
          this->amount_.set (::std::move (r));
          continue;
        }
      }

      // rounding
      //
      if (n.name () == "rounding" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< rounding_type > r (
          rounding_traits::create (i, f, this));

        if (!this->rounding_)
        {
          this->rounding_.set (::std::move (r));
          continue;
        }
      }

      // dateTime
      //
      if (n.name () == "dateTime" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< dateTime_type > r (
          dateTime_traits::create (i, f, this));

        if (!dateTime_.present ())
        {
          this->dateTime_.set (::std::move (r));
          continue;
        }
      }

      // note
      //
      if (n.name () == "note" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< note_type > r (
          note_traits::create (i, f, this));

        if (!note_.present ())
        {
          this->note_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!amount_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "amount",
        "http://naesb.org/espi");
    }

    if (!dateTime_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "dateTime",
        "http://naesb.org/espi");
    }

    if (!note_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "note",
        "http://naesb.org/espi");
    }
  }

  LineItem* LineItem::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class LineItem (*this, f, c);
  }

  LineItem& LineItem::
  operator= (const LineItem& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->amount_ = x.amount_;
      this->rounding_ = x.rounding_;
      this->dateTime_ = x.dateTime_;
      this->note_ = x.note_;
    }

    return *this;
  }

  LineItem::
  ~LineItem ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace espi
{
  ::std::ostream&
  operator<< (::std::ostream& o, const LineItem& i)
  {
    o << ::std::endl << "amount: " << i.amount ();
    if (i.rounding ())
    {
      o << ::std::endl << "rounding: " << *i.rounding ();
    }

    o << ::std::endl << "dateTime: " << i.dateTime ();
    o << ::std::endl << "note: " << i.note ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace espi
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace espi
{
  void
  operator<< (::xercesc::DOMElement& e, const LineItem& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // amount
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "amount",
          "http://naesb.org/espi",
          e));

      s << i.amount ();
    }

    // rounding
    //
    if (i.rounding ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "rounding",
          "http://naesb.org/espi",
          e));

      s << *i.rounding ();
    }

    // dateTime
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "dateTime",
          "http://naesb.org/espi",
          e));

      s << i.dateTime ();
    }

    // note
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "note",
          "http://naesb.org/espi",
          e));

      s << i.note ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

