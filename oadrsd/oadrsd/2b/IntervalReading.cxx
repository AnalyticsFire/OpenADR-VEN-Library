// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "IntervalReading.hxx"

#include "Int48.hxx"

#include "ReadingQuality.hxx"

#include "DateTimeInterval.hxx"

namespace espi
{
  // IntervalReading
  // 

  const IntervalReading::cost_optional& IntervalReading::
  cost () const
  {
    return this->cost_;
  }

  IntervalReading::cost_optional& IntervalReading::
  cost ()
  {
    return this->cost_;
  }

  void IntervalReading::
  cost (const cost_type& x)
  {
    this->cost_.set (x);
  }

  void IntervalReading::
  cost (const cost_optional& x)
  {
    this->cost_ = x;
  }

  void IntervalReading::
  cost (::std::unique_ptr< cost_type > x)
  {
    this->cost_.set (std::move (x));
  }

  const IntervalReading::ReadingQuality_sequence& IntervalReading::
  ReadingQuality () const
  {
    return this->ReadingQuality_;
  }

  IntervalReading::ReadingQuality_sequence& IntervalReading::
  ReadingQuality ()
  {
    return this->ReadingQuality_;
  }

  void IntervalReading::
  ReadingQuality (const ReadingQuality_sequence& s)
  {
    this->ReadingQuality_ = s;
  }

  const IntervalReading::timePeriod_optional& IntervalReading::
  timePeriod () const
  {
    return this->timePeriod_;
  }

  IntervalReading::timePeriod_optional& IntervalReading::
  timePeriod ()
  {
    return this->timePeriod_;
  }

  void IntervalReading::
  timePeriod (const timePeriod_type& x)
  {
    this->timePeriod_.set (x);
  }

  void IntervalReading::
  timePeriod (const timePeriod_optional& x)
  {
    this->timePeriod_ = x;
  }

  void IntervalReading::
  timePeriod (::std::unique_ptr< timePeriod_type > x)
  {
    this->timePeriod_.set (std::move (x));
  }

  const IntervalReading::value_optional& IntervalReading::
  value () const
  {
    return this->value_;
  }

  IntervalReading::value_optional& IntervalReading::
  value ()
  {
    return this->value_;
  }

  void IntervalReading::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void IntervalReading::
  value (const value_optional& x)
  {
    this->value_ = x;
  }

  void IntervalReading::
  value (::std::unique_ptr< value_type > x)
  {
    this->value_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace espi
{
  // IntervalReading
  //

  IntervalReading::
  IntervalReading ()
  : ::espi::Object (),
    cost_ (this),
    ReadingQuality_ (this),
    timePeriod_ (this),
    value_ (this)
  {
  }

  IntervalReading::
  IntervalReading (const IntervalReading& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::espi::Object (x, f, c),
    cost_ (x.cost_, f, this),
    ReadingQuality_ (x.ReadingQuality_, f, this),
    timePeriod_ (x.timePeriod_, f, this),
    value_ (x.value_, f, this)
  {
  }

  IntervalReading::
  IntervalReading (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::espi::Object (e, f | ::xml_schema::flags::base, c),
    cost_ (this),
    ReadingQuality_ (this),
    timePeriod_ (this),
    value_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void IntervalReading::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::espi::Object::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // cost
      //
      if (n.name () == "cost" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< cost_type > r (
          cost_traits::create (i, f, this));

        if (!this->cost_)
        {
          this->cost_.set (::std::move (r));
          continue;
        }
      }

      // ReadingQuality
      //
      if (n.name () == "ReadingQuality" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< ReadingQuality_type > r (
          ReadingQuality_traits::create (i, f, this));

        this->ReadingQuality_.push_back (::std::move (r));
        continue;
      }

      // timePeriod
      //
      if (n.name () == "timePeriod" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< timePeriod_type > r (
          timePeriod_traits::create (i, f, this));

        if (!this->timePeriod_)
        {
          this->timePeriod_.set (::std::move (r));
          continue;
        }
      }

      // value
      //
      if (n.name () == "value" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< value_type > r (
          value_traits::create (i, f, this));

        if (!this->value_)
        {
          this->value_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  IntervalReading* IntervalReading::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class IntervalReading (*this, f, c);
  }

  IntervalReading& IntervalReading::
  operator= (const IntervalReading& x)
  {
    if (this != &x)
    {
      static_cast< ::espi::Object& > (*this) = x;
      this->cost_ = x.cost_;
      this->ReadingQuality_ = x.ReadingQuality_;
      this->timePeriod_ = x.timePeriod_;
      this->value_ = x.value_;
    }

    return *this;
  }

  IntervalReading::
  ~IntervalReading ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace espi
{
  ::std::ostream&
  operator<< (::std::ostream& o, const IntervalReading& i)
  {
    o << static_cast< const ::espi::Object& > (i);

    if (i.cost ())
    {
      o << ::std::endl << "cost: " << *i.cost ();
    }

    for (IntervalReading::ReadingQuality_const_iterator
         b (i.ReadingQuality ().begin ()), e (i.ReadingQuality ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "ReadingQuality: " << *b;
    }

    if (i.timePeriod ())
    {
      o << ::std::endl << "timePeriod: " << *i.timePeriod ();
    }

    if (i.value ())
    {
      o << ::std::endl << "value: " << *i.value ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace espi
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace espi
{
  void
  operator<< (::xercesc::DOMElement& e, const IntervalReading& i)
  {
    e << static_cast< const ::espi::Object& > (i);

    // cost
    //
    if (i.cost ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "cost",
          "http://naesb.org/espi",
          e));

      s << *i.cost ();
    }

    // ReadingQuality
    //
    for (IntervalReading::ReadingQuality_const_iterator
         b (i.ReadingQuality ().begin ()), n (i.ReadingQuality ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ReadingQuality",
          "http://naesb.org/espi",
          e));

      s << *b;
    }

    // timePeriod
    //
    if (i.timePeriod ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "timePeriod",
          "http://naesb.org/espi",
          e));

      s << *i.timePeriod ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "value",
          "http://naesb.org/espi",
          e));

      s << *i.value ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

