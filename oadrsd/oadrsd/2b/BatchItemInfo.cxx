// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "BatchItemInfo.hxx"

#include "HexBinary16.hxx"

#include "CRUDOperation.hxx"

#include "StatusCode.hxx"

#include "String256.hxx"

namespace espi
{
  // BatchItemInfo
  // 

  const BatchItemInfo::name_optional& BatchItemInfo::
  name () const
  {
    return this->name_;
  }

  BatchItemInfo::name_optional& BatchItemInfo::
  name ()
  {
    return this->name_;
  }

  void BatchItemInfo::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void BatchItemInfo::
  name (const name_optional& x)
  {
    this->name_ = x;
  }

  void BatchItemInfo::
  name (::std::unique_ptr< name_type > x)
  {
    this->name_.set (std::move (x));
  }

  const BatchItemInfo::operation_optional& BatchItemInfo::
  operation () const
  {
    return this->operation_;
  }

  BatchItemInfo::operation_optional& BatchItemInfo::
  operation ()
  {
    return this->operation_;
  }

  void BatchItemInfo::
  operation (const operation_type& x)
  {
    this->operation_.set (x);
  }

  void BatchItemInfo::
  operation (const operation_optional& x)
  {
    this->operation_ = x;
  }

  void BatchItemInfo::
  operation (::std::unique_ptr< operation_type > x)
  {
    this->operation_.set (std::move (x));
  }

  const BatchItemInfo::statusCode_optional& BatchItemInfo::
  statusCode () const
  {
    return this->statusCode_;
  }

  BatchItemInfo::statusCode_optional& BatchItemInfo::
  statusCode ()
  {
    return this->statusCode_;
  }

  void BatchItemInfo::
  statusCode (const statusCode_type& x)
  {
    this->statusCode_.set (x);
  }

  void BatchItemInfo::
  statusCode (const statusCode_optional& x)
  {
    this->statusCode_ = x;
  }

  void BatchItemInfo::
  statusCode (::std::unique_ptr< statusCode_type > x)
  {
    this->statusCode_.set (std::move (x));
  }

  const BatchItemInfo::statusReason_optional& BatchItemInfo::
  statusReason () const
  {
    return this->statusReason_;
  }

  BatchItemInfo::statusReason_optional& BatchItemInfo::
  statusReason ()
  {
    return this->statusReason_;
  }

  void BatchItemInfo::
  statusReason (const statusReason_type& x)
  {
    this->statusReason_.set (x);
  }

  void BatchItemInfo::
  statusReason (const statusReason_optional& x)
  {
    this->statusReason_ = x;
  }

  void BatchItemInfo::
  statusReason (::std::unique_ptr< statusReason_type > x)
  {
    this->statusReason_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace espi
{
  // BatchItemInfo
  //

  BatchItemInfo::
  BatchItemInfo ()
  : ::espi::Object (),
    name_ (this),
    operation_ (this),
    statusCode_ (this),
    statusReason_ (this)
  {
  }

  BatchItemInfo::
  BatchItemInfo (const BatchItemInfo& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::espi::Object (x, f, c),
    name_ (x.name_, f, this),
    operation_ (x.operation_, f, this),
    statusCode_ (x.statusCode_, f, this),
    statusReason_ (x.statusReason_, f, this)
  {
  }

  BatchItemInfo::
  BatchItemInfo (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::espi::Object (e, f | ::xml_schema::flags::base, c),
    name_ (this),
    operation_ (this),
    statusCode_ (this),
    statusReason_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void BatchItemInfo::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::espi::Object::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!this->name_)
        {
          this->name_.set (::std::move (r));
          continue;
        }
      }

      // operation
      //
      if (n.name () == "operation" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< operation_type > r (
          operation_traits::create (i, f, this));

        if (!this->operation_)
        {
          this->operation_.set (::std::move (r));
          continue;
        }
      }

      // statusCode
      //
      if (n.name () == "statusCode" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< statusCode_type > r (
          statusCode_traits::create (i, f, this));

        if (!this->statusCode_)
        {
          this->statusCode_.set (::std::move (r));
          continue;
        }
      }

      // statusReason
      //
      if (n.name () == "statusReason" && n.namespace_ () == "http://naesb.org/espi")
      {
        ::std::unique_ptr< statusReason_type > r (
          statusReason_traits::create (i, f, this));

        if (!this->statusReason_)
        {
          this->statusReason_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  BatchItemInfo* BatchItemInfo::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class BatchItemInfo (*this, f, c);
  }

  BatchItemInfo& BatchItemInfo::
  operator= (const BatchItemInfo& x)
  {
    if (this != &x)
    {
      static_cast< ::espi::Object& > (*this) = x;
      this->name_ = x.name_;
      this->operation_ = x.operation_;
      this->statusCode_ = x.statusCode_;
      this->statusReason_ = x.statusReason_;
    }

    return *this;
  }

  BatchItemInfo::
  ~BatchItemInfo ()
  {
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace espi
{
  ::std::ostream&
  operator<< (::std::ostream& o, const BatchItemInfo& i)
  {
    o << static_cast< const ::espi::Object& > (i);

    if (i.name ())
    {
      o << ::std::endl << "name: " << *i.name ();
    }

    if (i.operation ())
    {
      o << ::std::endl << "operation: " << *i.operation ();
    }

    if (i.statusCode ())
    {
      o << ::std::endl << "statusCode: " << *i.statusCode ();
    }

    if (i.statusReason ())
    {
      o << ::std::endl << "statusReason: " << *i.statusReason ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace espi
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace espi
{
  void
  operator<< (::xercesc::DOMElement& e, const BatchItemInfo& i)
  {
    e << static_cast< const ::espi::Object& > (i);

    // name
    //
    if (i.name ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          "http://naesb.org/espi",
          e));

      s << *i.name ();
    }

    // operation
    //
    if (i.operation ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "operation",
          "http://naesb.org/espi",
          e));

      s << *i.operation ();
    }

    // statusCode
    //
    if (i.statusCode ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "statusCode",
          "http://naesb.org/espi",
          e));

      s << *i.statusCode ();
    }

    // statusReason
    //
    if (i.statusReason ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "statusReason",
          "http://naesb.org/espi",
          e));

      s << *i.statusReason ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

